Overview
========

Each directory contains the Ott language specification and corresponding
Coq development for the following languages:

* Fsub:  System F  with subtyping,  extended with  let-bindings  and sum
  types.  The hand-written proofs  prove transitivity of the algorithmic
  subtyping  relation, progress, and  preservation.  This  constitutes a
  solution to parts 1A and 2A of the POPLmark challenge.

  The  basis for  this example  is  Subversion revision  3283 of  Penn's
  metatheory library.

  Substantive changes compared to the original development:
      * The   output   from    LNgen   has   completely   replaced   the
        `Infrastructure` file, while the  output from Ott has completely
        replaced the `Definitions` file.
      * `value_regular`   no  longer  holds,   since  Ott   generates  a
        completely different definition of the `value` predicate.

  Minor changes compared to the original development:
      * The names of a lot of lemmas and functions changed.
      * `Coercion`s no longer work as well as they used to.

* Lambda:  Untyped  lambda terms.   This  development  includes the  Coq
  formalizations  for  the "LNgen:  Tool  Support  for Locally  Nameless
  Representations" by Aydemir and Weirich (draft).

* LF_hhp93:  LF, as  defined in  "A  Framework for  Defining Logics"  by
  Harper, Honsell, and Plotkin (Journal of the ACM, 1993).

* SimpleTypes: The simply typed lambda calculus.  The hand-written
  proofs prove progress and preservation for this language.


Naming conventions for files
============================

Unless  otherwise  noted,  files  in  the  directories  here  are  named
according to the following conventions:

* Ott language specifications end in `.ott`.
* Files generated by Ott end in `_ott.v`.
* Files generated by LNgen end in `_inf.v`.
* Files with hand-written proofs end in `_proofs.v`.

Examples that include an `original` directory were produced by taking an
existing  Coq  formalization,   writing  a  corresponding  Ott  language
specification,  running Ott  and LNgen  on the  specification,  and then
modifying  the   existing  proofs  as   needed  to  use   the  generated
infrastructure.
